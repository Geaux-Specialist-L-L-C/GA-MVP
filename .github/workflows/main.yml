name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - '.github/copilot-instructions.md'
      - 'docs/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - '.github/copilot-instructions.md'
      - 'docs/**'

permissions:
  checks: write
  contents: read
  pull-requests: write

env:
  NODE_VERSION: '20'
  VITE_USE_SECURE_COOKIES: 'true'
  VITE_AUTH_PERSISTENCE: 'LOCAL'
  VITE_AUTH_POPUP_FALLBACK: 'true'
  VITE_SERVICE_WORKER_TIMEOUT: '10000'
  VITE_MAX_AUTH_RETRIES: '3'
  VITE_AUTH_POPUP_REDIRECT_RESOLVER: 'browser'

jobs:
  validate-environment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate development environment
        run: |
          if [ -f "devcontainer.json" ]; then
            echo "✅ Development container configuration validated"
          else
            echo "❌ Error: Missing devcontainer.json"
            exit 1
          fi

  build-and-test:
    needs: validate-environment
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Clear npm cache
      run: npm cache clean --force
      
    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Setup Firebase Tools
      run: npm install -g firebase-tools

    - name: Run linter
      run: npm run lint

    - name: Prepare Service Worker
      run: node scripts/prepare-service-worker.js
      env:
        VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
        VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
        VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
        VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
        VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
      
    - name: Start Firebase Emulators
      run: firebase emulators:start --only auth,firestore,functions &
      
    - name: Wait for Emulators
      run: sleep 10

    - name: Run tests
      run: npm test
      env:
        FIREBASE_AUTH_EMULATOR_HOST: localhost:9099
        FIRESTORE_EMULATOR_HOST: localhost:8080
        FIREBASE_FUNCTIONS_EMULATOR_HOST: localhost:5001
        VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
        VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
        VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
        VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
        VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
        VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
        VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
        VITE_FIREBASE_DATABASE_URL: ${{ secrets.VITE_FIREBASE_DATABASE_URL }}
        VITE_CHESHIRE_API_URL: ${{ secrets.VITE_CHESHIRE_API_URL }}
        VITE_CHESHIRE_API_TOKEN: ${{ secrets.VITE_CHESHIRE_API_TOKEN }}
        VITE_CHESHIRE_API_TOKEN_TYPE: ${{ secrets.VITE_CHESHIRE_API_TOKEN_TYPE }}
        VITE_CHESHIRE_DEBUG: ${{ secrets.VITE_CHESHIRE_DEBUG }}
        VITE_OPENAI_API_KEY: ${{ secrets.VITE_OPENAI_API_KEY }}

    - name: Build
      run: npm run build
      env:
        NODE_ENV: production
        VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
        VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
        VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
        VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
        VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
        VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
        VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
        VITE_FIREBASE_DATABASE_URL: ${{ secrets.VITE_FIREBASE_DATABASE_URL }}
        VITE_CHESHIRE_API_URL: ${{ secrets.VITE_CHESHIRE_API_URL }}
        VITE_CHESHIRE_API_TOKEN: ${{ secrets.VITE_CHESHIRE_API_TOKEN }}
        VITE_CHESHIRE_API_TOKEN_TYPE: ${{ secrets.VITE_CHESHIRE_API_TOKEN_TYPE }}
        VITE_CHESHIRE_DEBUG: ${{ secrets.VITE_CHESHIRE_DEBUG }}
        VITE_OPENAI_API_KEY: ${{ secrets.VITE_OPENAI_API_KEY }}

    - name: Check bundle size
      run: npm run analyze-bundle || true

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build
        path: dist/

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Firebase CLI
      run: npm install -g firebase-tools

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build
        path: dist/

    - name: Update Firebase Security Headers
      run: |
        cat > firebase.json << 'EOF'
        {
          "hosting": {
            "public": "dist",
            "ignore": [
              "firebase.json",
              "**/.*",
              "**/node_modules/**"
            ],
            "headers": [
              {
                "source": "**",
                "headers": [
                  {
                    "key": "Content-Security-Policy",
                    "value": "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://*.firebaseapp.com https://*.firebase.com https://apis.google.com https://www.googletagmanager.com https://*.gstatic.com; connect-src 'self' https://*.firebaseio.com https://*.firebase.com wss://*.firebaseio.com https://firebase.googleapis.com https://identitytoolkit.googleapis.com https://firebaseinstallations.googleapis.com https://www.googleapis.com; frame-src 'self' https://*.firebaseapp.com https://*.firebase.com https://accounts.google.com https://apis.google.com; img-src 'self' data: https: blob:; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' data: https://fonts.gstatic.com; worker-src 'self' blob: 'unsafe-inline'; manifest-src 'self';"
                  },
                  {
                    "key": "Cross-Origin-Opener-Policy",
                    "value": "same-origin-allow-popups"
                  },
                  {
                    "key": "Cross-Origin-Embedder-Policy",
                    "value": "unsafe-none"
                  },
                  {
                    "key": "Cross-Origin-Resource-Policy",
                    "value": "cross-origin"
                  },
                  {
                    "key": "X-Content-Type-Options",
                    "value": "nosniff"
                  },
                  {
                    "key": "X-Frame-Options",
                    "value": "DENY"
                  },
                  {
                    "key": "X-XSS-Protection",
                    "value": "1; mode=block"
                  },
                  {
                    "key": "Referrer-Policy",
                    "value": "strict-origin-when-cross-origin"
                  },
                  {
                    "key": "Permissions-Policy",
                    "value": "accelerometer=(), autoplay=(), camera=(), cross-origin-isolated=(), display-capture=(), document-domain=(), encrypted-media=(), fullscreen=(self), geolocation=(), gyroscope=(), keyboard-map=(), magnetometer=(), microphone=(), midi=(), payment=(), picture-in-picture=(), publickey-credentials-get=(), screen-wake-lock=(), sync-xhr=(self), usb=(), web-share=(), xr-spatial-tracking=()"
                  }
                ]
              },
              {
                "source": "**/*.@(js|css|png|jpg|jpeg|gif|webp|svg|woff|woff2)",
                "headers": [
                  {
                    "key": "Cache-Control",
                    "value": "public, max-age=31536000, immutable"
                  }
                ]
              },
              {
                "source": "/firebase-messaging-sw.js",
                "headers": [
                  {
                    "key": "Service-Worker-Allowed",
                    "value": "/"
                  },
                  {
                    "key": "Cache-Control",
                    "value": "no-cache, no-store, must-revalidate"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/javascript; charset=utf-8"
                  }
                ]
              },
              {
                "source": "/__/auth/**",
                "headers": [
                  {
                    "key": "Cache-Control",
                    "value": "no-cache, no-store, must-revalidate"
                  }
                ]
              }
            ],
            "rewrites": [
              {
                "source": "**",
                "destination": "/index.html"
              }
            ]
          }
        }
        EOF

    - name: Deploy to Firebase
      run: |
        firebase use ${{ secrets.FIREBASE_PROJECT_ID }} --token ${{ secrets.FIREBASE_TOKEN }} --non-interactive
        firebase deploy --only hosting --token ${{ secrets.FIREBASE_TOKEN }} --non-interactive
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}