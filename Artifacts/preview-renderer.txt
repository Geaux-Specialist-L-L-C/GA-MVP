from typing import Dict, List, Optional
import markdown
import json
from jinja2 import Template
import yaml

class PreviewRenderer:
    """Renders unit plan previews in various formats"""
    
    def __init__(self):
        self.html_template = Template("""
            <!DOCTYPE html>
            <html>
            <head>
                <title>{{ unit.title }}</title>
                <style>
                    body { font-family: Arial, sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 20px; }
                    h1 { color: #2c5282; border-bottom: 2px solid #2c5282; padding-bottom: 10px; }
                    h2 { color: #4a5568; margin-top: 30px; }
                    .objective { background: #ebf8ff; padding: 15px; margin: 10px 0; border-radius: 5px; }
                    .activity { background: #f0fff4; padding: 15px; margin: 10px 0; border-radius: 5px; }
                    .assessment { background: #fff5f5; padding: 15px; margin: 10px 0; border-radius: 5px; }
                    .metadata { color: #718096; font-size: 0.9em; }
                </style>
            </head>
            <body>
                <h1>{{ unit.title }}</h1>
                
                <div class="metadata">
                    <p>Grade Level: {{ unit.grade_level }}</p>
                    <p>Duration: {{ unit.duration }}</p>
                    <p>Subjects: {{ unit.subjects|join(', ') }}</p>
                </div>
                
                <h2>Learning Objectives</h2>
                {% for objective in unit.objectives %}
                <div class="objective">
                    <h3>{{ objective.subject }}</h3>
                    <p>{{ objective.description }}</p>
                    {% if objective.assessment_criteria %}
                    <div class="criteria">
                        <strong>Assessment Criteria:</strong>
                        <ul>
                        {% for criterion in objective.assessment_criteria %}
                            <li>{{ criterion }}</li>
                        {% endfor %}
                        </ul>
                    </div>
                    {% endif %}
                </div>
                {% endfor %}
                
                <h2>Activities</h2>
                {% for activity in unit.activities %}
                <div class="activity">
                    <h3>{{ activity.title }}</h3>
                    <p>{{ activity.description }}</p>
                    <div class="details">
                        <p><strong>Duration:</strong> {{ activity.duration }}</p>
                        <p><strong>Grouping:</strong> {{ activity.grouping }}</p>
                    </div>
                    {% if activity.materials %}
                    <div class="materials">
                        <strong>Materials:</strong>
                        <ul>
                        {% for material in activity.materials %}
                            <li>{{ material }}</li>
                        {% endfor %}
                        </ul>
                    </div>
                    {% endif %}
                </div>
                {% endfor %}
                
                {% if include_assessments %}
                <h2>Assessments</h2>
                {% for assessment in unit.assessments %}
                <div class="assessment">
                    <h3>{{ assessment.title }}</h3>
                    <p>{{ assessment.description }}</p>
                    {% if assessment.rubric %}
                    <div class="rubric">
                        <h4>Rubric</h4>
                        <table border="1" cellpadding="5">
                            {% for criterion, levels in assessment.rubric.items() %}
                            <tr>
                                <th>{{ criterion }}</th>
                                {% for level in levels %}
                                <td>{{ level }}</td>
                                {% endfor %}
                            </tr>
                            {% endfor %}
                        </table>
                    </div>
                    {% endif %}
                </div>
                {% endfor %}
                {% endif %}
            </body>
            </html>
        """)
        
    def render_preview(
        self,
        unit_plan: Dict,
        format: str,
        settings: Dict
    ) -> str:
        """
        Render a preview of the unit plan in the specified format
        
        Args:
            unit_plan: Unit plan data
            format: Output format ('html', 'markdown', 'json', 'yaml')
            settings: Export settings
            
        Returns:
            str: Rendered preview
        """
        if format == 'html':
            return self.render_html(unit_plan, settings)
        elif format == 'markdown':
            return self.render_markdown(unit_plan, settings)
        elif format == 'json':
            return self.render_json(unit_plan, settings)
        elif format == 'yaml':
            return self.render_yaml(unit_plan, settings)
        else:
            raise ValueError(f"Unsupported format: {format}")
            
    def render_html(self, unit_plan: Dict, settings: Dict) -> str:
        """Render HTML preview"""
        return self.html_template.render(
            unit=unit_plan,
            include_assessments=settings.get('includeAssessments', True)
        )
        
    def render_markdown(self, unit_plan: Dict, settings: Dict) -> str:
        """Render Markdown preview"""
        md_content = f"""# {unit_plan['title']}

## Overview
- Grade Level: {unit_plan['grade_level']}
- Duration: {unit_plan['duration']}
- Subjects: {', '.join(unit_plan['subjects'])}

## Learning Objectives
{self._format_objectives_md(unit_plan['objectives'])}

## Activities
{self._format_activities_md(unit_plan['activities'])}
"""
        
        if settings.get('includeAssessments'):
            md_content += f"""
## Assessments
{self._format_assessments_md(unit_plan['assessments'])}
"""
            
        return md_content
        
    def _format_objectives_md(self, objectives: List[Dict]) -> str:
        """Format objectives for Markdown"""
        return '\n'.join([
            f"### {obj['subject']}\n{obj['description']}\n"
            f"**Assessment Criteria:**\n" +
            '\n'.join([f"- {criterion}" for criterion in obj['assessment_criteria']])
            for obj in objectives
        ])
        
    def _format_activities_md(self, activities: List[Dict]) -> str:
        """Format activities for Markdown"""
        return '\n'.join([
            f"### {activity['title']}\n"
            f"{activity['description']}\n\n"
            f"**Duration:** {activity['duration']}\n"
            f"**Grouping:** {activity['grouping']}\n\n"
            f"**Materials:**\n" +
            '\n'.join([f"- {material}" for material in activity['materials']])
            for activity in activities
        ])
        
    def _format_assessments_md(self, assessments: List[Dict]) -> str:
        """Format assessments for Markdown"""
        return '\n'.join([
            f"### {assessment['title']}\n"
            f"{assessment['description']}\n\n"
            f"**Type:** {assessment['type']}\n"
            f"**Standards:** {', '.join(assessment['standards'])}\n\n"
            f"**Rubric:**\n" +
            self._format_rubric_md(assessment['rubric'])
            for assessment in assessments
        ])
        
    def _format_rubric_md(self, rubric: Dict) -> str:
        """Format rubric for Markdown"""
        header = "| Criterion | " + " | ".join(["Level " + str(i+1) for i in range(len(next(iter(rubric.values()))))]) + " |"
        separator = "|" + "|".join(["-" * 10 for _ in range(len(next(iter(rubric.values()))) + 1)]) + "|"
        rows = []
        for criterion, levels in rubric.items():
            row = f"| {criterion} | " + " | ".join(levels) + " |"
            rows.append(row)
        return '\n'.join([header, separator] + rows)
        
    def render_json(self, unit_plan: Dict, settings: Dict) -> str:
        """Render JSON preview with formatting"""
        # Filter content based on settings
        export_data = self._filter_content(unit_plan, settings)
        return json.dumps(export_data, indent=2)
        
    def render_yaml(self, unit_plan: Dict, settings: Dict) -> str:
        """Render YAML preview"""
        export_data = self._filter_content(unit_plan, settings)
        return yaml.dump(export_data, sort_keys=False, allow_unicode=True)
        
    def _filter_content(self, unit_plan: Dict, settings: Dict) -> Dict:
        """Filter unit plan content based on export settings"""
        filtered = dict(unit_plan)
        
        if not settings.get('includeRubrics', True):
            # Remove rubrics from assessments
            if 'assessments' in filtered:
                for assessment in filtered['assessments']:
                    assessment.pop('rubric', None)
                    
        if not settings.get('includeMaterials', True):
            # Remove materials lists
            if 'activities' in filtered:
                for activity in filtered['activities']:
                    activity.pop('materials', None)
                    
        if not settings.get('includeAssessments', True):
            # Remove entire assessments section
            filtered.pop('assessments', None)
            
        if not settings.get('includeDifferentiation', True):
            # Remove differentiation strategies
            filtered.pop('differentiation_strategies', None)
            if 'activities' in filtered:
                for activity in filtered['activities']:
                    activity.pop('differentiation', None)
                    
        return filtered
        
    def render_docx_preview(self, unit_plan: Dict, settings: Dict) -> bytes:
        """
        Generate a Word document preview
        
        Args:
            unit_plan: Unit plan data
            settings: Export settings
            
        Returns:
            bytes: Word document content
        """
        try:
            from docx import Document
            from docx.shared import Inches, Pt
            
            doc = Document()
            
            # Title
            doc.add_heading(unit_plan['title'], 0)
            
            # Overview section
            doc.add_heading('Overview', 1)
            overview = doc.add_paragraph()
            overview.add_run(f"Grade Level: {unit_plan['grade_level']}\n")
            overview.add_run(f"Duration: {unit_plan['duration']}\n")
            overview.add_run(f"Subjects: {', '.join(unit_plan['subjects'])}")
            
            # Objectives
            doc.add_heading('Learning Objectives', 1)
            for objective in unit_plan['objectives']:
                h = doc.add_heading(objective['subject'], 2)
                doc.add_paragraph(objective['description'])
                if objective['assessment_criteria']:
                    p = doc.add_paragraph('Assessment Criteria:\n')
                    for criterion in objective['assessment_criteria']:
                        p.add_run(f"• {criterion}\n")
                        
            # Activities
            doc.add_heading('Activities', 1)
            for activity in unit_plan['activities']:
                h = doc.add_heading(activity['title'], 2)
                doc.add_paragraph(activity['description'])
                details = doc.add_paragraph()
                details.add_run(f"Duration: {activity['duration']}\n")
                details.add_run(f"Grouping: {activity['grouping']}")
                
                if settings.get('includeMaterials', True) and activity.get('materials'):
                    p = doc.add_paragraph('Materials:\n')
                    for material in activity['materials']:
                        p.add_run(f"• {material}\n")
                        
            # Assessments
            if settings.get('includeAssessments', True) and unit_plan.get('assessments'):
                doc.add_heading('Assessments', 1)
                for assessment in unit_plan['assessments']:
                    h = doc.add_heading(assessment['title'], 2)
                    doc.add_paragraph(assessment['description'])
                    doc.add_paragraph(f"Type: {assessment['type']}")
                    
                    if settings.get('includeRubrics', True) and assessment.get('rubric'):
                        doc.add_heading('Rubric', 3)
                        table = doc.add_table(rows=1, cols=len(next(iter(assessment['rubric'].values()))) + 1)
                        header_cells = table.rows[0].cells
                        header_cells[0].text = 'Criterion'
                        for i in range(len(next(iter(assessment['rubric'].values())))):
                            header_cells[i+1].text = f'Level {i+1}'
                            
                        for criterion, levels in assessment['rubric'].items():
                            row_cells = table.add_row().cells
                            row_cells[0].text = criterion
                            for i, level in enumerate(levels):
                                row_cells[i+1].text = level
                                
            # Save to memory
            from io import BytesIO
            doc_buffer = BytesIO()
            doc.save(doc_buffer)
            return doc_buffer.getvalue()
            
        except ImportError:
            raise ImportError("python-docx package required for Word document preview")
            
    def render_canvas_preview(self, unit_plan: Dict, settings: Dict) -> Dict:
        """
        Generate a Canvas LMS module preview
        
        Args:
            unit_plan: Unit plan data
            settings: Export settings
            
        Returns:
            Dict: Canvas module structure
        """
        module = {
            'name': unit_plan['title'],
            'items': [
                {
                    'type': 'SubHeader',
                    'title': 'Overview'
                },
                {
                    'type': 'Page',
                    'title': 'Unit Overview',
                    'content': self._generate_overview_html(unit_plan)
                }
            ]
        }
        
        # Add objectives
        module['items'].extend([
            {
                'type': 'SubHeader',
                'title': 'Learning Objectives'
            },
            {
                'type': 'Page',
                'title': 'Objectives',
                'content': self._generate_objectives_html(unit_plan['objectives'])
            }
        ])
        
        # Add activities
        for activity in unit_plan['activities']:
            module['items'].extend([
                {
                    'type': 'Assignment',
                    'title': activity['title'],
                    'description': self._generate_activity_html(activity),
                    'submission_types': ['online_text_entry'],
                    'points_possible': 100
                }
            ])
            
        # Add assessments if included
        if settings.get('includeAssessments', True) and unit_plan.get('assessments'):
            module['items'].extend([
                {
                    'type': 'SubHeader',
                    'title': 'Assessments'
                }
            ])
            
            for assessment in unit_plan['assessments']:
                module['items'].append({
                    'type': 'Assignment',
                    'title': assessment['title'],
                    'description': self._generate_assessment_html(assessment),
                    'submission_types': ['online_upload'],
                    'points_possible': 100
                })
                
        return module
        
    def _generate_overview_html(self, unit_plan: Dict) -> str:
        """Generate HTML content for unit overview"""
        return f"""
        <div class="unit-overview">
            <h2>Unit Overview</h2>
            <div class="metadata">
                <p><strong>Grade Level:</strong> {unit_plan['grade_level']}</p>
                <p><strong>Duration:</strong> {unit_plan['duration']}</p>
                <p><strong>Subjects:</strong> {', '.join(unit_plan['subjects'])}</p>
            </div>
            <div class="standards">
                <h3>Standards Addressed</h3>
                <ul>
                    {''.join(f'<li>{std}</li>' for std in unit_plan['standards'])}
                </ul>
            </div>
        </div>
        """
        
    def _generate_objectives_html(self, objectives: List[Dict]) -> str:
        """Generate HTML content for learning objectives"""
        return f"""
        <div class="objectives">
            {''.join(f'''
                <div class="objective">
                    <h3>{obj['subject']}</h3>
                    <p>{obj['description']}</p>
                    <div class="assessment-criteria">
                        <h4>Assessment Criteria</h4>
                        <ul>
                            {''.join(f'<li>{criterion}</li>' for criterion in obj['assessment_criteria'])}
                        </ul>
                    </div>
                </div>
            ''' for obj in objectives)}
        </div>
        """
        
    def _generate_activity_html(self, activity: Dict) -> str:
        """Generate HTML content for an activity"""
        return f"""
        <div class="activity">
            <p>{activity['description']}</p>
            <div class="activity-details">
                <p><strong>Duration:</strong> {activity['duration']}</p>
                <p><strong>Grouping:</strong> {activity['grouping']}</p>
            </div>
            <div class="materials">
                <h4>Materials Needed</h4>
                <ul>
                    {''.join(f'<li>{material}</li>' for material in activity['materials'])}
                </ul>
            </div>
        </div>
        """
        
    def _generate_assessment_html(self, assessment: Dict) -> str:
        """Generate HTML content for an assessment"""
        return f"""
        <div class="assessment">
            <p>{assessment['description']}</p>
            <p><strong>Type:</strong> {assessment['type']}</p>
            <p><strong>Standards:</strong> {', '.join(assessment['standards'])}</p>
            {self._generate_rubric_html(assessment['rubric']) if assessment.get('rubric') else ''}
        </div>
        """
        
    def _generate_rubric_html(self, rubric: Dict) -> str:
        """Generate HTML table for rubric"""
        headers = ['Criterion'] + [f'Level {i+1}' for i in range(len(next(iter(rubric.values()))))]
        
        return f"""
        <div class="rubric">
            <h4>Evaluation Rubric</h4>
            <table border="1" cellpadding="5">
                <tr>
                    {''.join(f'<th>{header}</th>' for header in headers)}
                </tr>
                {''.join(f'''
                    <tr>
                        <td><strong>{criterion}</strong></td>
                        {''.join(f'<td>{level}</td>' for level in levels)}
                    </tr>
                ''' for criterion, levels in rubric.items())}
            </table>
        </div>
        """