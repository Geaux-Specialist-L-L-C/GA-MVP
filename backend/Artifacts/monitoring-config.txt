# File: /backend/monitoring/config.py
# Description: Monitoring system configuration management

from typing import Dict, Optional
from pydantic import BaseModel, Field
import json
from datetime import datetime
from pymongo import MongoClient
import asyncio

class MetricThreshold(BaseModel):
    warning: float = Field(..., description="Warning threshold value")
    critical: float = Field(..., description="Critical threshold value")
    enabled: bool = Field(default=True, description="Whether this threshold is enabled")

class AgentConfig(BaseModel):
    response_time: MetricThreshold
    error_rate: MetricThreshold
    memory_usage: MetricThreshold
    cpu_usage: MetricThreshold
    enabled: bool = Field(default=True, description="Whether this agent is monitored")

class MonitoringConfig:
    def __init__(self, connection_string: str):
        self.client = MongoClient(connection_string)
        self.db = self.client.geaux_academy
        self._config_cache = {}
        self._cache_lock = asyncio.Lock()
        self._last_update = datetime.min

    async def get_config(self, agent_type: str) -> Optional[AgentConfig]:
        """Get configuration for specific agent type"""
        async with self._cache_lock:
            # Check if cache needs refresh
            if (datetime.utcnow() - self._last_update).seconds > 300:
                await self._refresh_cache()
            
            return self._config_cache.get(agent_type)

    async def update_config(self, agent_type: str, config: Dict) -> AgentConfig:
        """Update configuration for specific agent type"""
        # Validate configuration
        agent_config = AgentConfig(**config)
        
        # Store in database
        await self.db.monitoring_config.update_one(
            {"agent_type": agent_type},
            {
                "$set": {
                    "config": agent_config.dict(),
                    "updated_at": datetime.utcnow()
                }
            },
            upsert=True
        )
        
        # Update cache
        async with self._cache_lock:
            self._config_cache[agent_type] = agent_config
            self._last_update = datetime.utcnow()
        
        return agent_config

    async def _refresh_cache(self):
        """Refresh configuration cache from database"""
        configs = await self.db.monitoring_config.find().to_list(None)
        
        self._config_cache = {
            config["agent_type"]: AgentConfig(**config["config"])
            for config in configs
        }
        
        self._last_update = datetime.utcnow()

    @staticmethod
    def get_default_config() -> Dict:
        """Get default monitoring configuration"""
        return {
            "response_time": {
                "warning": 3.0,
                "critical": 5.0,
                "enabled": True
            },
            "error_rate": {
                "warning": 0.05,
                "critical": 0.10,
                "enabled": True
            },
            "memory_usage": {
                "warning": 0.80,
                "critical": 0.90,
                "enabled": True
            },
            "cpu_usage": {
                "warning": 0.70,
                "critical": 0.85,
                "enabled": True
            },
            "enabled": True
        }

# File: /backend/api/config.py
# Description: Configuration management API endpoints

from fastapi import APIRouter, HTTPException
from typing import Dict

router = APIRouter()
config_manager = MonitoringConfig("mongodb://localhost:27017")

@router.get("/config/{agent_type}")
async def get_agent_config(agent_type: str):
    """Get monitoring configuration for specific agent"""
    try:
        config = await config_manager.get_config(agent_type)
        if not config:
            # Return default configuration if none exists
            return MonitoringConfig.get_default_config()
        return config
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.put("/config/{agent_type}")
async def update_agent_config(agent_type: str, config: Dict):
    """Update monitoring configuration for specific agent"""
    try:
        updated_config = await config_manager.update_config(agent_type, config)
        return updated_config
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/config/{agent_type}/reset")
async def reset_agent_config(agent_type: str):
    """Reset agent configuration to defaults"""
    try:
        default_config = MonitoringConfig.get_default_config()
        updated_config = await config_manager.update_config(
            agent_type,
            default_config
        )
        return updated_config
    except Exception as e: