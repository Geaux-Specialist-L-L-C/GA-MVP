from typing import Dict, List, Optional, Union
from dataclasses import dataclass
import json
import xml.etree.ElementTree as ET
from datetime import datetime
import uuid
import zipfile
from pathlib import Path
import io

@dataclass
class D2LRubricCriterion:
    name: str
    description: str
    levels: List[Dict[str, Union[str, float]]]
    feedback_options: Optional[List[str]] = None
    criterion_type: str = "standard"  # standard, holistic, or custom

@dataclass
class D2LTemplate:
    id: str
    name: str
    template_type: str  # quiz, assignment, discussion, content
    structure: Dict
    metadata: Dict

class D2LAdvancedIntegration:
    """Advanced D2L (Brightspace) integration features"""
    
    def __init__(self, base_url: str = "https://example.brightspace.com"):
        self.base_url = base_url
        self.templates = self._load_default_templates()
        
    def create_rubric(
        self,
        competency: Dict,
        assessment_type: str
    ) -> Dict:
        """Create D2L-compatible rubric from competency"""
        criteria = []
        
        # Map competency indicators to rubric criteria
        for idx, indicator in enumerate(competency['indicators']):
            criterion = D2LRubricCriterion(
                name=f"Criterion {idx + 1}",
                description=indicator,
                levels=[
                    {
                        "name": "Below Expectations",
                        "points": 1,
                        "description": f"Limited demonstration of {indicator.lower()}",
                        "feedback": "Focus on fundamental concepts and practice basic skills."
                    },
                    {
                        "name": "Meeting Expectations",
                        "points": 2,
                        "description": f"Adequate demonstration of {indicator.lower()}",
                        "feedback": "Good work! Consider exploring more complex applications."
                    },
                    {
                        "name": "Exceeding Expectations",
                        "points": 3,
                        "description": f"Exemplary demonstration of {indicator.lower()}",
                        "feedback": "Excellent! You've shown mastery of this concept."
                    }
                ],
                feedback_options=[
                    "Review foundational concepts",
                    "Practice with additional examples",
                    "Ready for advanced applications"
                ]
            )
            criteria.append(criterion)
            
        # Add holistic assessment if appropriate
        if assessment_type == 'project':
            criteria.append(D2LRubricCriterion(
                name="Overall Mastery",
                description=competency['description'],
                criterion_type="holistic",
                levels=[
                    {
                        "name": "Developing",
                        "points": 5,
                        "description": "Basic understanding with areas for improvement"
                    },
                    {
                        "name": "Proficient",
                        "points": 8,
                        "description": "Strong demonstration of competency"
                    },
                    {
                        "name": "Advanced",
                        "points": 10,
                        "description": "Exceptional mastery and application"
                    }
                ]
            ))
            
        return self._format_rubric_for_d2l(criteria)
        
    def generate_assignment_template(
        self,
        competency: Dict,
        template_type: str
    ) -> Dict:
        """Generate D2L assignment template"""
        template = self.templates.get(template_type)
        if not template:
            raise ValueError(f"Unknown template type: {template_type}")
            
        # Customize template based on competency
        customized = template.structure.copy()
        customized.update({
            "name": f"{competency['name']} Assessment",
            "instructions": self._generate_instructions(competency, template_type),
            "completion_type": "score",
            "score": {
                "maximum": self._calculate_max_score(competency, template_type),
                "can_exceed_max": False,
                "decimal_places": 2
            },
            "submission": {
                "type": self._determine_submission_type(template_type),
                "files_allowed": True,
                "file_types": [".doc", ".docx", ".pdf", ".txt"],
                "text_submission_allowed": True
            },
            "availability": {
                "start_date": None,
                "end_date": None,
                "due_date": None,
                "late_submission_allowed": True,
                "late_submission_deadline": None
            },
            "evaluation": {
                "anonymous_marking": False,
                "marking_type": "numeric",
                "rubric_scoring_method": "points",
                "allow_feedback": True
            }
        })
        
        return customized
        
    def create_widget_integration(
        self,
        widget_type: str,
        settings: Dict
    ) -> Dict:
        """Create D2L widget configuration"""
        widget_configs = {
            "competency_tracker": {
                "type": "progress_visualization",
                "url": f"{self.base_url}/widgets/competency-tracker",
                "height": 400,
                "width": 600,
                "allow_fullscreen": True,
                "settings": {
                    "display_type": "dashboard",
                    "show_prerequisites": True,
                    "show_mastery_levels": True,
                    "update_frequency": "realtime"
                }
            },
            "skills_matrix": {
                "type": "matrix_visualization",
                "url": f"{self.base_url}/widgets/skills-matrix",
                "height": 600,
                "width": 800,
                "allow_fullscreen": True,
                "settings": {
                    "matrix_type": "heatmap",
                    "show_connections": True,
                    "interactive": True
                }
            },
            "learning_path": {
                "type": "path_visualization",
                "url": f"{self.base_url}/widgets/learning-path",
                "height": 500,
                "width": 700,
                "allow_fullscreen": True,
                "settings": {
                    "path_style": "flowchart",
                    "show_progress": True,
                    "allow_navigation": True
                }
            }
        }
        
        if widget_type not in widget_configs:
            raise ValueError(f"Unknown widget type: {widget_type}")
            
        config = widget_configs[widget_type].copy()
        config['settings'].update(settings)
        
        return config
        
    def package_content(
        self,
        content: Dict,
        output_path: Optional[str] = None
    ) -> Union[bytes, str]:
        """Package content for D2L import"""
        # Create manifest
        manifest = self._create_manifest(content)
        
        # Create content structure
        structure = self._create_content_structure(content)
        
        # Prepare files for packaging
        files = {
            'manifest.xml': self._generate_manifest_xml(manifest),
            'content.xml': self._generate_content_xml(structure),
            'metadata.json': json.dumps(content.get('metadata', {}), indent=2),
            'resources/': {}
        }
        
        # Add resources (files, images, etc.)
        resources = self._gather_resources(content)
        files['resources/'].update(resources)
        
        # Create package
        if output_path:
            return self._create_zip_file(files, output_path)
        else:
            return self._create_zip_bytes(files)
            
    def _load_default_templates(self) -> Dict[str, D2LTemplate]:
        """Load default D2L templates"""
        return {
            "practice": D2LTemplate(
                id="tpl_practice",
                name="Practice Assignment",
                template_type="assignment",
                structure={
                    "completion_type": "auto",
                    "grade_item_type": "numeric",
                    "auto_grade": True,
                    "attempt_settings": {
                        "allowed_attempts": 3,
                        "grade_calculation": "highest"
                    }
                },
                metadata={
                    "purpose": "practice",
                    "feedback_type": "immediate",
                    "time_limit": None
                }
            ),
            "project": D2LTemplate(
                id="tpl_project",
                name="Project Assessment",
                template_type="assignment",
                structure={
                    "completion_type": "manual",
                    "grade_item_type": "numeric_rubric",
                    "auto_grade": False,
                    "attempt_settings": {
                        "allowed_attempts": 1,
                        "grade_calculation": "last"
                    }
                },
                metadata={
                    "purpose": "assessment",
                    "feedback_type": "detailed",
                    "time_limit": None
                }
            ),
            "quiz": D2LTemplate(
                id="tpl_quiz",
                name="Competency Quiz",
                template_type="quiz",
                structure={
                    "question_display": "one_at_a_time",
                    "shuffle_questions": True,
                    "show_correct_answers": True,
                    "attempt_settings": {
                        "allowed_attempts": 2,
                        "grade_calculation": "highest",
                        "time_limit": 60
                    }
                },
                metadata={
                    "purpose": "assessment",
                    "feedback_type": "immediate",
                    "difficulty": "adaptive"
                }
            )
        }
        
    def _format_rubric_for_d2l(
        self,
        criteria: List[D2LRubricCriterion]
    ) -> Dict:
        """Format rubric criteria for D2L"""
        return {
            "name": "Assessment Rubric",
            "status": "published",
            "scoring_method": "points",
            "criteria": [
                {
                    "name": criterion.name,
                    "description": criterion.description,
                    "criterion_type": criterion.criterion_type,
                    "levels": criterion.levels,
                    "feedback": {
                        "type": "predefined" if criterion.feedback_options else "custom",
                        "options": criterion.feedback_options
                    }
                }
                for criterion in criteria
            ],
            "associations": {
                "allow_associate_multiple_items": True,
                "hide_scores_until_graded": True
            }
        }
        
    def _generate_instructions(
        self,
        competency: Dict,
        template_type: str
    ) -> str:
        """Generate assignment instructions"""
        template = self.templates[template_type]
        
        instructions = [
            f"<h2>{competency['name']} Assessment</h2>",
            f"<p>{competency['description']}</p>",
            "<h3>Learning Objectives</h3>",
            "<ul>"
        ]
        
        for indicator in competency['indicators']:
            instructions.append(f"<li>{indicator}</li>")
            
        instructions.extend([
            "</ul>",
            "<h3>Instructions</h3>",
            "<ol>"
        ])
        
        if template_type == 'practice':
            instructions.extend([
                "<li>Review the provided examples and materials</li>",
                "<li>Complete the practice exercises</li>",
                "<li>Submit your work for feedback</li>",
                "<li>Review feedback and retry if needed</li>"
            ])
        elif template_type == 'project':
            instructions.extend([
                "<li>Review the project requirements</li>",
                "<li>Develop your solution</li>",
                "<li>Document your process</li>",
                "<li>Submit your completed project</li>"
            ])
        elif template_type == 'quiz':
            instructions.extend([
                "<li>Review the study materials</li>",
                "<li>Answer all questions</li>",
                "<li>Check your work before submission</li>",
                "<li>Submit within the time limit</li>"
            ])
            
        instructions.extend([
            "</ol>",
            "<h3>Submission Requirements</h3>",
            self._generate_submission_requirements(template_type)
        ])
        
        return "\n".join(instructions)
        
    def _generate_submission_requirements(self, template_type: str) -> str:
        """Generate submission requirements based on template"""
        if template_type == 'practice':
            return """
            <ul>
                <li>Submit your work in one of the following formats:
                    <ul>
                        <li>Word document (.doc, .docx)</li>
                        <li>PDF file (.pdf)</li>
                        <li>Text document (.txt)</li>
                    </ul>
                </li>
                <li>Include your work process and any calculations</li>
                <li>You may attempt this assignment up to 3 times</li>
            </ul>
            """
        elif template_type == 'project':
            return """
            <ul>
                <li>Submit a complete project document including:
                    <ul>
                        <li>Project overview</li>
                        <li>Methodology</li>
                        <li>Results and analysis</li>
                        <li>Conclusions</li>
                    </ul>
                </li>
                <li>Include any supporting files or evidence</li>
                <li>This is a one-time submission</li>
            </ul>
            """
        else:  # quiz
            return """
            <ul>
                <li>Complete all questions within the time limit</li>
                <li>You have 2 attempts available</li>
                <li>Your highest score will be recorded</li>
            </ul>
            """
            
    def _calculate_max_score(
        self,
        competency: Dict,
        template_type: str
    ) -> int:
        """Calculate maximum score based on template and competency"""
        if template_type == 'practice':
            return len(competency['indicators']) * 3  # 3 points per indicator
        elif template_type == 'project':
            return 100  # Standard project score
        else:  # quiz
            return len(competency['indicators']) * 5  # 5 points per indicator
            
    def _determine_submission_type(self, template_type: str) -> List[str]:
        """Determine allowed submission types"""
        submission_types = {
            'practice': ['file', 'text'],
            'project': ['file', 'text', 'url'],
            'quiz': ['online']
        }
        return submission_types.get(template_type, ['file', 'text'])
        
    def _create_manifest(self, content: Dict) -> Dict:
        """Create package manifest"""
        return {
            "schema_version": "1.0",
            "title": content.get('title', 'Untitled Content'),
            "type": content.get('type', 'module'),
            "created": datetime.now().isoformat(),
            "creator": content.get('metadata', {}).get('creator', 'System'),
            "organization": content.get('metadata', {}).get('organization', ''),
            "items": self._generate_manifest_items(content)
        }
        
    def _generate_manifest_items(self, content: Dict) -> List[Dict]:
        """Generate manifest items list"""
        items = []
        
        # Add overview content
        items.append({
            "identifier":