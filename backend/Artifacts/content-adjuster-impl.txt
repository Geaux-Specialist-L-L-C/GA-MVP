from typing import List, Dict, Optional
from dataclasses import dataclass
from datetime import datetime
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class ContentModification:
    """Structure for content modifications"""
    type: str  # "simplify", "enrich", "reinforce", etc.
    description: str
    changes: List[Dict]
    rationale: str

@dataclass
class LearningPath:
    """Structure for learning paths"""
    current_topic: str
    prerequisites: List[str]
    next_topics: List[str]
    difficulty_level: str
    estimated_duration: int  # in days

class ContentAdjuster:
    """Enhanced implementation of the Content Adjuster agent"""
    
    def __init__(self):
        self.modification_strategies = {
            "mastery": self._create_mastery_modifications,
            "proficient": self._create_proficient_modifications,
            "developing": self._create_developing_modifications,
            "needs_support": self._create_support_modifications
        }

    def adjust_content(
        self,
        performance_data: Dict,
        current_plan: Dict
    ) -> Dict:
        """
        Adjust learning content based on performance data
        
        Args:
            performance_data: Dictionary containing performance analysis
            current_plan: Current lesson plan
            
        Returns:
            Dictionary containing adjusted content and recommendations
        """
        try:
            logger.info("Starting content adjustment")
            
            # Extract key information
            mastery_level = performance_data.get("mastery_level", "developing")
            strengths = performance_data.get("strengths", [])
            weaknesses = performance_data.get("weaknesses", [])
            
            # Create base adjustment plan
            adjustment_plan = {
                "original_plan": current_plan,
                "modifications": [],
                "learning_path": self._create_learning_path(
                    performance_data,
                    current_plan
                ),
                "pacing_adjustments": self._adjust_pacing(
                    performance_data,
                    current_plan
                ),
                "resource_recommendations": self._recommend_resources(
                    mastery_level,
                    strengths,
                    weaknesses
                )
            }
            
            # Apply appropriate modifications
            modification_func = self.modification_strategies.get(
                mastery_level,
                self._create_developing_modifications
            )
            
            modifications = modification_func(
                performance_data,
                current_plan
            )
            
            adjustment_plan["modifications"] = modifications
            
            # Add differentiation strategies
            adjustment_plan["differentiation"] = self._create_differentiation_strategies(
                mastery_level,
                strengths,
                weaknesses
            )
            
            return adjustment_plan
            
        except Exception as e:
            logger.error(f"Error adjusting content: {str(e)}")
            raise

    def _create_learning_path(
        self,
        performance_data: Dict,
        current_plan: Dict
    ) -> Dict:
        """Create an adjusted learning path"""
        try:
            current_topic = current_plan.get("topic", "")
            mastery_level = performance_data.get("mastery_level", "developing")
            
            # Define path based on mastery level
            if mastery_level == "mastery":
                path = {
                    "type": "accelerated",
                    "next_topics": self._get_advanced_topics(current_topic),
                    "estimated_duration": "shortened",
                    "depth": "extended"
                }
            elif mastery_level == "proficient":
                path = {
                    "type": "standard",
                    "next_topics": self._get_standard_topics(current_topic),
                    "estimated_duration": "standard",
                    "depth": "comprehensive"
                }
            elif mastery_level == "developing":
                path = {
                    "type": "supported",
                    "next_topics": self._get_standard_topics(current_topic),
                    "estimated_duration": "extended",
                    "depth": "thorough"
                }
            else:  # needs_support
                path = {
                    "type": "remedial",
                    "next_topics": self._get_prerequisite_topics(current_topic),
                    "estimated_duration": "flexible",
                    "depth": "foundational"
                }
            
            return path
            
        except Exception as e:
            logger.error(f"Error creating learning path: {str(e)}")
            raise

    def _adjust_pacing(
        self,
        performance_data: Dict,
        current_plan: Dict
    ) -> Dict:
        """Adjust the pacing of content delivery"""
        try:
            mastery_level = performance_data.get("mastery_level", "developing")
            trend = performance_data.get("trend_analysis", {}).get("recent_performance", "stable")
            
            pacing_adjustments = {
                "original_duration": current_plan.get("duration", 60),
                "adjusted_duration": current_plan.get("duration", 60),
                "modification_type": "none",
                "rationale": []
            }
            
            # Adjust based on mastery and trend
            if mastery_level == "mastery" and trend == "improving":
                pacing_adjustments.update({
                    "adjusted_duration": int(pacing_adjustments["original_duration"] * 0.8),
                    "modification_type": "accelerated",
                    "rationale": ["High mastery level", "Improving performance trend"]
                })
            elif mastery_level == "needs_support" or trend == "declining":
                pacing_adjustments.update({
                    "adjusted_duration": int(pacing_adjustments["original_duration"] * 1.5),
                    "modification_type": "extended",
                    "rationale": ["Additional support needed", "Ensure concept mastery"]
                })
            
            return pacing_adjustments
            
        except Exception as e:
            logger.error(f"Error adjusting pacing: {str(e)}")
            raise

    def _recommend_resources(
        self,
        mastery_level: str,
        strengths: List[str],
        weaknesses: List[str]
    ) -> List[Dict]:
        """Recommend additional learning resources"""
        try:
            recommendations = []
            
            if mastery_level == "mastery":
                recommendations.extend([
                    {
                        "type": "enrichment",
                        "resources": [
                            "Advanced problem sets",
                            "Real-world application projects",
                            "Research opportunities"
                        ]
                    }
                ])
            elif mastery_level == "proficient":
                recommendations.extend([
                    {
                        "type": "reinforcement",
                        "resources": [
                            "Practice problems",
                            "Interactive simulations",
                            "Peer discussion forums"
                        ]
                    }
                ])
            elif mastery_level == "developing":
                recommendations.extend([
                    {
                        "type": "support",
                        "resources": [
                            "Tutorial videos",
                            "Guided practice exercises",
                            "Study guides"
                        ]
                    }
                ])
            else:  # needs_support
                recommendations.extend([
                    {
                        "type": "intervention",
                        "resources": [
                            "Basic concept reviews",
                            "Step-by-step guides",
                            "Visual learning aids"
                        ]
                    }
                ])
            
            # Add resources for specific weaknesses
            for weakness in weaknesses:
                if "inconsistent" in weakness.lower():
                    recommendations.append({
                        "type": "consistency",
                        "resources": [
                            "Progress tracking tools",
                            "Study schedule templates",
                            "Review checklists"
                        ]
                    })
            
            return recommendations
            
        except Exception as e:
            logger.error(f"Error recommending resources: {str(e)}")
            raise

    def _create_mastery_modifications(
        self,
        performance_data: Dict,
        current_plan: Dict
    ) -> List[ContentModification]:
        """Create modifications for mastery-level students"""
        try:
            modifications = []
            
            # Add enrichment activities
            modifications.append(
                ContentModification(
                    type="enrich",
                    description="Add advanced content",
                    changes=[
                        {"action": "modify", "content": "Add real-world applications"}
                    ],
                    rationale="Student demonstrates mastery and readiness for advanced content"
                )
            )
            
            # Modify pacing
            modifications.append(
                ContentModification(
                    type="pace",
                    description="Accelerate content delivery",
                    changes=[
                        {"action": "modify", "content": "Reduce practice time"},
                        {"action": "modify", "content": "Combine related topics"},
                        {"action": "add", "content": "Preview upcoming concepts"}
                    ],
                    rationale="Student can handle accelerated pace based on performance"
                )
            )
            
            return modifications
            
        except Exception as e:
            logger.error(f"Error creating mastery modifications: {str(e)}")
            raise

    def _create_proficient_modifications(
        self,
        performance_data: Dict,
        current_plan: Dict
    ) -> List[ContentModification]:
        """Create modifications for proficient-level students"""
        try:
            modifications = []
            
            # Add reinforcement activities
            modifications.append(
                ContentModification(
                    type="reinforce",
                    description="Reinforce current concepts",
                    changes=[
                        {"action": "add", "content": "Additional practice problems"},
                        {"action": "add", "content": "Peer discussion activities"},
                        {"action": "modify", "content": "Include real-world examples"}
                    ],
                    rationale="Student shows good understanding but needs reinforcement"
                )
            )
            
            # Maintain standard pacing
            modifications.append(
                ContentModification(
                    type="pace",
                    description="Maintain current pace",
                    changes=[
                        {"action": "maintain", "content": "Standard lesson duration"},
                        {"action": "add", "content": "Optional challenge activities"}
                    ],
                    rationale="Current pace is appropriate for proficiency level"
                )
            )
            
            return modifications
            
        except Exception as e:
            logger.error(f"Error creating proficient modifications: {str(e)}")
            raise

    def _create_developing_modifications(
        self,
        performance_data: Dict,
        current_plan: Dict
    ) -> List[ContentModification]:
        """Create modifications for developing-level students"""
        try:
            modifications = []
            
            # Add support activities
            modifications.append(
                ContentModification(
                    type="support",
                    description="Provide additional support",
                    changes=[
                        {"action": "add", "content": "Guided practice sessions"},
                        {"action": "add", "content": "Visual learning aids"},
                        {"action": "modify", "content": "Break down complex concepts"}
                    ],
                    rationale="Student needs additional support to master concepts"
                )
            )
            
            # Adjust pacing
            modifications.append(
                ContentModification(
                    type="pace",
                    description="Extend learning time",
                    changes=[
                        {"action": "modify", "content": "Increase practice time"},
                        {"action": "add", "content": "Review sessions"},
                        {"action": "modify", "content": "Break topics into smaller units"}
                    ],
                    rationale="Additional time needed for concept mastery"
                )
            )
            
            return modifications
            
        except Exception as e:
            logger.error(f"Error creating developing modifications: {str(e)}")
            raise

    def _create_support_modifications(
        self,
        performance_data: Dict,
        current_plan: Dict
    ) -> List[ContentModification]:
        """Create modifications for students needing additional support"""
        try:
            modifications = []
            
            # Add intervention activities
            modifications.append(
                ContentModification(
                    type="intervene",
                    description="Implement intervention strategies",
                    changes=[
                        {"action": "add", "content": "One-on-one tutoring sessions"},
                        {"action": "add", "content": "Basic skills review"},
                        {"action": "modify", "content": "Simplify complex concepts"}
                    ],
                    rationale="Student requires intensive support and intervention"
                )
            )
            
            # Significantly adjust pacing
            modifications.append(
                ContentModification(
                    type="pace",
                    description="Significantly modify pace",
                    changes=[
                        {"action": "modify", "content": "Double practice time"},
                        {"action": "add", "content": "Daily review sessions"},
                        {"action": "modify", "content": "Focus on foundational concepts"}
                    ],
                    rationale="Extensive time needed for concept understanding"
                )
            )
            
            return modifications
            
        except Exception as e:
            logger.error(f"Error creating support modifications: {str(e)}")
            raise

    def _create_differentiation_strategies(
        self,
        mastery_level: str,
        strengths: List[str],
        weaknesses: List[str]
    ) -> Dict:
        """Create differentiation strategies based on learning profile"""
        try:
            strategies = {
                "content_modifications": [],
                "process_adjustments": [],
                "product_options": []
            }
            
            # Content modifications
            if mastery_level == "mastery":
                strategies["content_modifications"].extend([
                    "Provide advanced reading materials",
                    "Include abstract concepts",
                    "Add interdisciplinary connections"
                ])
            elif mastery_level == "needs_support":
                strategies["content_modifications"].extend([
                    "Simplify text complexity",
                    "Provide vocabulary support",
                    "Include visual aids"
                ])
            
            # Process adjustments
            for strength in strengths:
                strategies["process_adjustments"].append(
                    f"Leverage strength in {strength}"
                )
            
            for weakness in weaknesses:
                strategies["process_adjustments"].append(
                    f"Support improvement in {weakness}"
                )
            
            # Product options
            strategies["product_options"].extend([
                "Multiple assessment formats",
                "Choice in demonstration methods",
                "Varied completion timeframes"
            ])
            
            return strategies
            
        except Exception as e:
            logger.error(f"Error creating differentiation strategies: {str(e)}")
            raise

    def _get_advanced_topics(self, current_topic: str) -> List[str]:
        """Get advanced topics related to current topic"""
        # This would connect to a curriculum database in production
        return [
            f"Advanced {current_topic}",
            f"{current_topic} Applications",
            f"{current_topic} Extensions"
        ]

    def _get_standard_topics(self, current_topic: str) -> List[str]:
        """Get standard next topics in sequence"""
        # This would connect to a curriculum database in production
        return [
            f"Next {current_topic} Unit",
            f"{current_topic} Part 2",
            f"{current_topic} Practice"
        ]

    def _get_prerequisite_topics(self, current_topic: str) -> List[str]:
        """Get prerequisite topics for current topic"""
        # This would connect to a curriculum database in production
        return [
            f"Basic {current_topic}",
            f"{current_topic} Foundations",
            f"Introduction to {current_topic}"
        ] "add", "content": "Challenge problems"},
                        {"action": "add", "content": "Independent research project"},
                        {"action":