# Detailed Feature-Specific Prompts

## Curriculum Management

### Curriculum Researcher Agent
```prompt
Create a CurriculumResearcher agent that:
- Scrapes educational content from approved websites
- Maps content to educational standards
- Validates content appropriateness
- Organizes resources by grade level and subject

Include:
- Rate limiting for web scraping
- Content validation rules
- Error handling for failed requests
- Logging for tracking scraping results

Example usage:
researcher = CurriculumResearcher()
standards = researcher.research_standards(grade_level=5, subject="math")
resources = researcher.find_resources(topic="fractions", grade_level=5)
```

### Lesson Plan Generator
```prompt
Implement a LessonPlanGenerator that:
- Creates structured lesson plans from curriculum standards
- Includes activities, assessments, and resources
- Adapts to different learning styles
- Provides timing and material requirements

Required components:
- Activity template system
- Assessment generation
- Resource linking
- Timing calculations
- Material requirement tracking

Example structure:
class LessonPlanGenerator:
    def __init__(self):
        self.activity_templates = self._load_templates()
        self.assessment_bank = self._load_assessments()
        
    def generate_plan(
        self,
        topic: str,
        grade_level: int,
        duration: int,
        learning_style: str
    ) -> Dict:
        """Generate complete lesson plan"""
```

## Progress Tracking

### Performance Analyzer
```prompt
Create a PerformanceAnalyzer that:
- Processes student performance data
- Identifies learning trends
- Generates progress reports
- Provides intervention recommendations

Include analytics for:
- Score trending
- Concept mastery
- Learning pace
- Comparison to standards

Example implementation:
class PerformanceAnalyzer:
    def analyze_trends(self, performance_data: List[Dict]) -> Dict:
        """Analyze performance trends"""
        
    def identify_gaps(self, performance: Dict, standards: Dict) -> List[str]:
        """Identify learning gaps"""
        
    def recommend_interventions(self, analysis: Dict) -> List[Dict]:
        """Generate intervention recommendations"""
```

### Learning Path Optimizer
```prompt
Implement a LearningPathOptimizer that:
- Adjusts content difficulty based on performance
- Resequences topics for optimal learning
- Suggests additional practice areas
- Tracks mastery progression

Required features:
- Difficulty scaling algorithm
- Topic dependency mapping
- Practice recommendation engine
- Progress tracking system

Example structure:
class LearningPathOptimizer:
    def optimize_path(
        self,
        current_path: Dict,
        performance: Dict,
        learning_style: str
    ) -> Dict:
        """Optimize learning path"""
```

## Resource Management

### Content Integration
```prompt
Create a ContentIntegrator that:
- Connects with external educational platforms
- Syncs content across systems
- Manages resource metadata
- Handles content updates

Include:
- API integration framework
- Content synchronization
- Metadata management
- Update tracking

Example implementation:
class ContentIntegrator:
    def sync_resources(self, platform: str, content_type: str) -> Dict:
        """Sync resources from external platform"""
        
    def update_metadata(self, resource_id: str, metadata: Dict) -> bool:
        """Update resource metadata"""
        
    def track_changes(self, resource_id: str) -> List[Dict]:
        """Track content changes"""
```

### Resource Recommender
```prompt
Implement a ResourceRecommender that:
- Suggests relevant learning materials
- Filters by grade level and subject
- Considers learning style
- Tracks resource effectiveness

Required components:
- Recommendation algorithm
- Content filtering system
- Usage tracking
- Effectiveness metrics

Example structure:
class ResourceRecommender:
    def recommend_resources(
        self,
        topic: str,
        grade_level: int,
        learning_style: str,
        performance: Dict
    ) -> List[Dict]:
        """Generate resource recommendations"""
```

## Collaboration Tools

### Study Group Coordinator
```prompt
Create a StudyGroupCoordinator that:
- Matches students for group learning
- Schedules group sessions
- Tracks group progress
- Facilitates resource sharing

Include:
- Matching algorithm
- Schedule management
- Progress tracking
- Resource distribution

Example implementation:
class StudyGroupCoordinator:
    def match_students(
        self,
        students: List[Dict],
        topic: str,
        level: str
    ) -> List[Dict]:
        """Match students for study groups"""
        
    def schedule_session(
        self,
        group_id: str,
        duration: int,
        topic: str
    ) -> Dict:
        """Schedule study session"""
```

### Parent-Teacher Communication
```prompt
Implement a CommunicationHub that:
- Manages message routing
- Tracks communication history
- Schedules conferences
- Shares progress updates

Required features:
- Message management system
- Calendar integration
- Progress report generation
- Notification system

Example structure:
class CommunicationHub:
    def send_update(
        self,
        student_id: str,
        update_type: str,
        content: Dict
    ) -> bool:
        """Send progress update"""
        
    def schedule_conference(
        self,
        participants: List[str],
        topic: str,
        duration: int
    ) -> Dict:
        """Schedule parent-teacher conference"""
```

## Assessment System

### Dynamic Quiz Generator
```prompt
Create a QuizGenerator that:
- Generates questions based on content
- Adapts difficulty levels
- Provides varied question types
- Tracks question effectiveness

Include:
- Question template system
- Difficulty scaling
- Answer validation
- Performance tracking

Example implementation:
class QuizGenerator:
    def generate_quiz(
        self,
        topic: str,
        difficulty: str,
        num_questions: int
    ) -> Dict:
        """Generate adaptive quiz"""
        
    def evaluate_response(
        self,
        question_id: str,
        response: str
    ) -> Dict:
        """Evaluate quiz response"""
```

### Progress Evaluator
```prompt
Implement a ProgressEvaluator that:
- Assesses mastery levels
- Tracks skill development
- Generates progress reports
- Provides achievement recommendations

Required components:
- Mastery tracking system
- Skill assessment
- Report generation
- Goal setting

Example structure:
class ProgressEvaluator:
    def assess_mastery(
        self,
        student_id: str,
        topic: str
    ) -> Dict:
        """Assess topic mastery"""
        
    def generate_report(
        self,
        student_id: str,
        time_period: str
    ) -> Dict:
        """Generate progress report"""
```

## System Administration

### Performance Monitor
```prompt
Create a SystemMonitor that:
- Tracks system performance
- Monitors resource usage
- Identifies bottlenecks
- Generates system reports

Include:
- Performance metrics
- Resource tracking
- Alert system
- Report generation

Example implementation:
class SystemMonitor:
    def track_performance(self) -> Dict:
        """Track system performance"""
        
    def monitor_resources(self) -> Dict:
        """Monitor resource usage"""
        
    def generate_report(self) -> Dict:
        """Generate system report"""
```

### Security Manager
```prompt
Implement a SecurityManager that:
- Manages authentication
- Controls access levels
- Monitors security events
- Handles data encryption

Required features:
- Authentication system
- Authorization controls
- Event monitoring
- Encryption handling

Example structure:
class SecurityManager:
    def authenticate_user(
        self,
        credentials: Dict
    ) -> bool:
        """Authenticate user"""
        
    def authorize_access(
        self,
        user_id: str,
        resource: str
    ) -> bool:
        """Authorize resource access"""
```
